//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShaderClasses
{
    using System;
    using System.Runtime.InteropServices;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using SharpDX;
    using SharpDX.Direct3D11;
    
    
    [Serializable()]
    [StructLayout(LayoutKind.Sequential, Size=24)]
    public struct TestVertexShader_Vertex : System.Runtime.Serialization.ISerializable, IEquatable<TestVertexShader_Vertex>
    {
        
        private Vector4 _Position0;
        
        private Vector2 _Texcoord0;
        
        private TestVertexShader_Vertex(SerializationInfo info, StreamingContext context)
        {
            _Position0 = new Vector4(info.GetSingle("_Position0_X"),info.GetSingle("_Position0_Y"), info.GetSingle("_Position0_Z"), info.GetSingle("_Position0_W"));
            _Texcoord0 = new Vector2(info.GetSingle("_Texcoord0_X"),info.GetSingle("_Texcoord0_Y"));
        }
        
        public TestVertexShader_Vertex(Vector4 _Position0_, Vector2 _Texcoord0_)
        {
            _Position0 = _Position0_;
            _Texcoord0 = _Texcoord0_;
        }
        
        public SharpDX.Vector4 Position0
        {
            get
            {
                return _Position0;
            }
        }
        
        public SharpDX.Vector2 Texcoord0
        {
            get
            {
                return _Texcoord0;
            }
        }
        
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("_Position0_X", _Position0.X);
            info.AddValue("_Position0_Y", _Position0.Y);
            info.AddValue("_Position0_Z", _Position0.Z);
            info.AddValue("_Position0_W", _Position0.W);
            info.AddValue("_Texcoord0_X", _Texcoord0.X);
            info.AddValue("_Texcoord0_Y", _Texcoord0.Y);
        }
        
        public bool Equals(TestVertexShader_Vertex other)
        {
            return (other._Position0 == _Position0) && (other._Position0 == _Position0) && (other._Texcoord0 == _Texcoord0);
        }
        
        public override bool Equals(object other)
        {
            if (other is TestVertexShader_Vertex)
            {
                return Equals(other);
            }
            else
            {
                return false;
            }
        }
        
        public static bool operator==(TestVertexShader_Vertex a, TestVertexShader_Vertex b)
        {
            return a.Equals(b);
        }
        
        public static bool operator!=(TestVertexShader_Vertex a, TestVertexShader_Vertex b)
        {
            return !a.Equals(b);
        }
        
        public override int GetHashCode()
        {
            int hash = 17;
            hash = hash * 31 + Position0.GetHashCode();
            return hash * 31 + Texcoord0.GetHashCode();
        }
    }
    
    public class TestVertexShader
    {
        
        // this is generated whether or not it is needed
        private InputLayout inputLayout;
    }
}
